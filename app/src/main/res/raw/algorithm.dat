0;What is recurrence for worst case of QuickSort and what is the time complexity in Worst case?;Recurrence is T(n) = T(n-2) + O(n) and time complexity is O(n^2);Recurrence is T(n) = T(n-1) + O(n) and time complexity is O(n^2);Recurrence is T(n) = 2T(n/2) + O(n) and time complexity is O(nLogn);Recurrence is T(n) = T(n/10) + T(9n/10) + O(n) and time complexity is O(nLogn);2;T(n) = T(n-1) + O(n)
1;Suppose we have a O(n) time algorithm that finds median of an unsorted array. Now consider a QuickSort implementation where we first find median using the above algorithm, then use median as pivot. What will be the worst case time complexity of this modified QuickSort.;O(n^2 Logn);O(n^2);O(n Logn Logn);O(nLogn);2;O(n2)
2;Which of the following sorting algorithms in its typical implementation gives best performance when applied on an array which is sorted or almost sorted (maximum 1 or two elements are misplaced).;Quick Sort;Heap Sort;Merge Sort;Insertion Sort;4;Insertion Sort
3;Given an unsorted array. The array has this property that every element in array is at most k distance from its position in sorted array where k is a positive integer smaller than size of array. Which sorting algorithm can be easily modified for sorting this array and what is the obtainable time complexity?;Insertion Sort with time complexity O(kn);Heap Sort with time complexity O(nLogk);Quick Sort with time complexity O(kLogk);Merge Sort with time complexity O(kLogk);2;Heap Sort
4;Suppose we are sorting an array of eight integers using heapsort, and we have just finished some heapify (either maxheapify or minheapify) operations. The array now looks like this: 16 14 15 10 12 27 28 How many heapify operations have been performed on root of heap?;1;2;3 or 4;5 or 6;2;2
5;What is the worst case time complexity of insertion sort where position of the data to be inserted is calculated using binary search?;N;NlogN;N^2;N(logN)^2;3;N^2
6;Consider the Quicksort algorithm. Suppose there is a procedure for finding a pivot element which splits the list into two sub-lists each of which contains at least one-fifth of the elements. Let T(n) be the number of comparisons required to sort n elements. Then-;T(n) <= 2T(n/5) + n;T(n) <= T(n/5) + T(4n/5) + n;T(n) <= 2T(4n/5) + n;T(n) <= 2T(n/2) + n;2;T(n) <= T(n/5) + T(4n/5) + n
7;Which of the following sorting algorithms has the lowest worst-case complexity?;Merge Sort;Bubble Sort;Quick Sort;Selection Sort;1;Merge Sort
8;Assume that a mergesort algorithm in the worst case takes 30 seconds for an input of size 64. Which of the following most closely approximates the maximum input size of a problem that can be solved in 6 minutes?;256;512;1024;2048;2;512
9;Assume that we use Bubble Sort to sort n distinct elements in ascending order. When does the best case of Bubble Sort occur?;When elements are sorted in ascending order;When elements are sorted in descending order;When elements are not sorted by any order;There is no best case for Bubble Sort. It always takes O(n*n) time;1;Ascending Order
